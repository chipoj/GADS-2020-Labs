#LAB:Google Cloud Fundamentals: Getting Started with Cloud Storage and Cloud SQL
## Objectives
In this lab, you learn how to perform the following tasks:

	-Create a Cloud Storage bucket and place an image into it.

	-Create a Cloud SQL instance and configure it.

	-Connect to the Cloud SQL instance from a web server.

	-Use the image in the Cloud Storage bucket on a web page.

##Steps:
TASK 1- Deploy a web server VM instance called bloghost
	1. Create an instance named bloghost with region and zone as per the qwiklabs,  image should be Debian GNU/Linux 9 (stretch)
	   Allow http traffic and use a start up script
		
		gcloud config set compute/region us-central1
	
		gcloud config set compute/zone us-central-a 
		
		gcloud compute instances create bloghost --machine-type "n1-standard-1" \
 		--image-project "debian-cloud" --image "debian-9-stretch-v20190213" -- subnect "default" --tags http \
		--metadata startup-script=" 
		apt-get update;
		apt-get install apache2 php php-mysql -y;
		service apache2 restart "

		gcloud compute firewall-rules create allow-http --action=ALLOW --direction=INGRESS --rules=http:80 --target-tags=http

TASK 2- Create a Cloud Storage bucket using the gsutil command line

	1. enter your chosen location into an environment variable called LOCATION. Enter one of these commands:

		export LOCATION=US

	2. In Cloud Shell, the DEVSHELL_PROJECT_ID environment variable contains your project ID. Enter this command to make a bucket named after your project ID:

		gsutil mb -l $LOCATION gs://$DEVSHELL_PROJECT_ID

	3. Retrieve a banner image from a publicly accessible Cloud Storage location:

		gsutil cp gs://cloud-training/gcpfci/my-excellent-blog.png my-excellent-blog.png

	4. Copy the banner image to your newly created Cloud Storage bucket:

		gsutil cp my-excellent-blog.png gs://$DEVSHELL_PROJECT_ID/my-excellent-blog.png

	5. Modify the Access Control List of the object you just created so that it is readable by everyone:

		gsutil acl ch -u allUsers:R gs://$DEVSHELL_PROJECT_ID/my-excellent-blog.png

Task 3- Create the Cloud SQL instance

	1. Create instance with a MySQL  engine, instance shoudl have an Instance ID called type blog-db, and any Root password of your choice.

		gcloud sql instances create blog-db --password="admin" --sql-version=MYSQL_5_7" --zone=us-central1-a
	
	3. Create user named blogdbuser with any password

		gcloud sql users create blogdbuser --instance=blog-db -i blog-db --host='%' --password='password'

	4. Add network

	- get External ip address of the bloghost VM
		gcloud compute instances list

	- add network to the sql instance and use the the displayed ip address from the previous query
		gcloud sql instances patch blog-db --authorized-networks=[external ip address of the blogpost VM]
	

Task 4- Configure an application in a Compute Engine instance to use Cloud SQL

	1. SSH into the compute instance

		gcloud compute ssh hostvm --zone us-central1-a

	2. change your working directory to the document root of the web server
		
		cd /var/www/html

	3. Use the nano text editor to edit a file called index.php

		sudo nano index.php<html>

	4. Paste the content below into the file, make sure to replace CLOUDSQLIP with the Cloud SQL instance Public IP address and DBPASSWORD with the Cloud SQL database password that you defined above
		
		
		<head><title>Welcome to my excellent blog</title></head>
		<body>
		<h1>Welcome to my excellent blog</h1>
		<?php
		$dbserver = "134.34.222.23";
		$dbuser = "blogdbuser";
		$dbpassword = "password";
		// In a production blog, we would not store the MySQL
		// password in the document root. Instead, we would store it in a
		// configuration file elsewhere on the web server VM instance.

		$conn = new mysqli($dbserver, $dbuser, $dbpassword);

		if (mysqli_connect_error()) {
        	echo ("Database connection failed: " . mysqli_connect_error());
		} else {
        	echo ("Database connection succeeded.");
		}
		?>
		</body></html>


	5. Press Ctrl+O, and then press Enter to save your edited file.

	6. Press Ctrl+X to exit the nano text editor.

	7. Restart the web server:

		sudo service apache2 restart

	8. Open a new web browser tab and paste into the address bar your bloghost VM instance's external IP address followed by /index.php. The URL will look like this:
		
		35.192.208.2/index.php
	9. When you load the page, the following message appears:

		Database connection succeeded.

Task 5- Configure an application in a Compute Engine instance to use a Cloud Storage object

	Note a bucket already exist and it has an object called my-excellent-blog.png.  The bucket url are in the format, "https://storage.googleapis.con/<project_id>/<storage_item_name" project_id is the qwiklabs assigned project id
	

	1. Use the nano text editor to edit index.php

		sudo nano index.php
	
	2. Use the arrow keys to move the cursor to the line that contains the h1 element. 
	   Press Enter to open up a new, blank screen line, and then paste the bucket url between <img src=' and '>. Place the entery <h1>...</h1> before the line containing.   It should look like

		<img src='https://storage.googleapis.com/qwiklabs-gcp-0005e186fa559a09/my-excellent-blog.png'>


	3. Press Ctrl+O, and then press Enter to save your edited file.

	4. Press Ctrl+X to exit the nano text editor.

	5. Restart the web server:

		sudo service apache2 restart

	6. Return to the web browser tab in which you opened your bloghost VM instance's external IP address. When you load the page, its content now includes a banner image.

		

		
		
		
